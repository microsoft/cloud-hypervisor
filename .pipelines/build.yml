
parameters:
  - name: run_on_intel
    displayName: Run on Intel VM SKU
    type: boolean
    default: True
  - name: intel_vm_size_func
    displayName: Intel VM Size for Functional tests
    type: string
    default: "Standard_D32ds_v5"
  - name: run_on_amd
    displayName: Run on AMD VM SKU
    type: boolean
    default: True
  - name: amd_vm_size_func
    displayName: AMD VM Size - Functional tests
    type: string
    default: "Standard_D32ads_v5"
  - name: run_on_cvm
    displayName: Include CVM CLH Guest testing
    type: boolean
    default: True
  - name: amd_vm_size_func_cvm
    displayName: AMD VM Size - Functional tests (CVM)
    type: string
    default: "Standard_DC32ads_cc_v5"
  - name: run_ch_integration_tests
    displayName: Run CH Integration tests
    type: boolean
    default: True
  - name: override_clh_ref
    displayName: CH Github ref (Microsoft Fork Only)
    type: string
    default: " "
  - name: githubref
    displayName: LISA Github ref
    type: string
    default: " "

variables:
  - group: azure_subscription_testonly
  - group: azure_subscription_devtest
  - group: lis_database
  - group: mail
  - group: virtstackvalidation_variables
  - name: DEFAULT_BRANCH
    value: msft-main
  - name: RUST_VERSION
    value: "1.75.0"
  - name: test_project
    value: "Cloud-Hypervisor Test"
  - name: enable_publish
    value: False
  - name: ch_integration_tests
    # Should be of comma separated strings format
    ${{ if eq(variables['Build.Reason'], 'Manual') }}:
      value: ""
    ${{ else }}:
      # Following are VM life cycle tests from ch integration tests
      value: 'common_parallel::test_api_create_boot,common_parallel::test_api_shutdown,common_parallel::test_macvtap,common_parallel::test_snapshot_restore_basic'
  - name: ch_tests_exclude_list_cvm
    # Should be of comma separated strings format
    # Following are known failures
    value: 'common_parallel::test_boot_from_vhost_user_blk_default,common_parallel::test_boot_from_virtio_pmem,common_parallel::test_cpu_hotplug,common_parallel::test_cpu_topology_142,common_parallel::test_cpu_topology_262,common_parallel::test_cpu_topology_421,common_parallel::test_initramfs,common_parallel::test_iommu_segments,common_parallel::test_memory_hotplug,common_parallel::test_pmem_hotplug,common_parallel::test_pmem_multi_segment_hotplug,common_parallel::test_tpm,common_parallel::test_vhost_user_blk_default,common_parallel::test_vhost_user_blk_direct,common_parallel::test_vhost_user_blk_readonly,common_parallel::test_vhost_user_net_client_mode,common_parallel::test_vhost_user_net_default,common_parallel::test_vhost_user_net_existing_tap,common_parallel::test_vhost_user_net_host_mac,common_parallel::test_vhost_user_net_multiple_queues,common_parallel::test_vhost_user_net_named_tap,common_parallel::test_vhost_user_net_tap_multiple_queues,common_parallel::test_virtio_balloon_deflate_on_oom,common_parallel::test_virtio_fs,common_parallel::test_virtio_fs_hotplug,common_parallel::test_virtio_iommu,common_parallel::test_virtio_pmem_discard_writes,common_parallel::test_virtio_pmem_persist_writes,common_parallel::test_virtio_pmem_with_size,common_parallel::test_watchdog,common_parallel::test_snapshot_restore_basic,common_parallel::test_dmi_serial_number,common_parallel::test_dmi_uuid,common_parallel::test_dmi_oem_strings,common_parallel::test_vfio_user,common_parallel::test_focal_hypervisor_fw,common_parallel::test_focal_ovmf,common_parallel::test_power_button,common_parallel::test_api_pause_resume,boot_time_pmem_ms,boot_time_16_vcpus_pmem_ms'
  - name: clh_ref
    ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      value: $(Build.SourceVersion)
    ${{ else }}:
      value: $(System.PullRequest.SourceCommitId)

trigger:
  batch: false
  tags:
    include:
      - v*
  branches:
    include:
      - $(DEFAULT_BRANCH)

pr:
  autoCancel: false
  drafts: false
  branches:
    include:
      - $(DEFAULT_BRANCH)

resources:
  repositories:
    - repository: lisa
      type: git
      name: LSG/lsg-lisa
      ref: main

stages:
  - stage: "CLH_Build"
    displayName: "Cloud-Hypervisor Build"
    jobs:
      - job: CH_BUILD

        timeoutInMinutes: 30

        strategy:
          matrix:
            'x86_64 cargo build':
              AGENT_POOL: 'lsg-virt-amd64-1es-agent-pool-1'
              BUILD_CMD: 'cargo build'
            'x86_64 cargo build --no-default-features --features "mshv,kvm"':
              AGENT_POOL: 'lsg-virt-amd64-1es-agent-pool-1'
              BUILD_CMD: 'cargo build --no-default-features --features "mshv,kvm"'
            'x86_64 cargo build --no-default-features --features "mshv,kvm,sev_snp,igvm"':
              AGENT_POOL: 'lsg-virt-amd64-1es-agent-pool-1'
              BUILD_CMD: 'cargo build --no-default-features --features "mshv,kvm,sev_snp,igvm"'
            'x86_64 cargo build --package vhost_user_net':
              AGENT_POOL: 'lsg-virt-amd64-1es-agent-pool-1'
              BUILD_CMD: 'cargo build --package vhost_user_net'
            'x86_64 cargo build --package vhost_user_block':
              AGENT_POOL: 'lsg-virt-amd64-1es-agent-pool-2'
              BUILD_CMD: 'cargo build --package vhost_user_block'
            'aarch64 cargo build':
              AGENT_POOL: 'lsg-virt-aarch64-1es-agent-pool-2'
              BUILD_CMD: 'cargo build --all'
            'aarch64 cargo build --package vhost_user_net':
              AGENT_POOL: 'lsg-virt-aarch64-1es-agent-pool-2'
              BUILD_CMD: 'cargo build --all --package vhost_user_net'
            'aarch64 cargo build --package vhost_user_block':
              AGENT_POOL: 'lsg-virt-aarch64-1es-agent-pool-2'
              BUILD_CMD: 'cargo build --all --package vhost_user_block'
        pool:
          name: $(AGENT_POOL)
        steps:
        - checkout: self
          persistCredentials: true
        - template: templates/ubuntu-20.04-build.yml
        - bash: |
            set -e
            set -x

            $(BUILD_CMD) --release
          displayName: Build

      - job: CH_FMT

        timeoutInMinutes: 30
        pool:
          name: lsg-virt-amd64-1es-agent-pool-3

        steps:
        - checkout: self
          persistCredentials: true
        - template: templates/ubuntu-20.04-build.yml
        - bash: |
            set -e
            set -x

            cargo fmt -- --check

        - bash: test -z "$(git status --porcelain)"

      - job: CH_CLIPPY

        timeoutInMinutes: 30
        strategy:
          matrix:
            "clippy default":
                    CLIPPY_ARGS: "--locked --all --all-targets --tests --examples -- -D warnings -D clippy::undocumented_unsafe_blocks"
            "clippy default + guest_debug":
                    CLIPPY_ARGS: '--locked --all --all-targets --tests --examples --features "guest_debug" -- -D warnings -D clippy::undocumented_unsafe_blocks'
            "clippy default + tracing":
                    CLIPPY_ARGS: '--locked --all --all-targets --tests --examples --features "tracing" -- -D warnings -D clippy::undocumented_unsafe_blocks'
            "clippy mshv":
                    CLIPPY_ARGS: '--locked --all --all-targets --no-default-features --tests --examples --features "mshv" -- -D warnings -D clippy::undocumented_unsafe_blocks'
            "clippy mshv + kvm":
                    CLIPPY_ARGS: '--locked --all --all-targets --no-default-features --tests --examples --features "mshv,kvm" -- -D warnings -D clippy::undocumented_unsafe_blocks'
            "clippy kvm + tdx":
                    CLIPPY_ARGS: '--locked --all --all-targets --no-default-features --tests --examples --features "tdx,kvm" -- -D warnings -D clippy::undocumented_unsafe_blocks'
            "clippy mshv + kvm + sev_snp + igvm":
                    CLIPPY_ARGS: '--locked --all --all-targets --no-default-features --tests --examples --features "mshv,kvm,sev_snp,igvm" -- -D warnings -D clippy::undocumented_unsafe_blocks'
        pool:
          name: lsg-virt-amd64-1es-agent-pool-2
        steps:
        - checkout: self
          persistCredentials: true
        - template: templates/ubuntu-20.04-build.yml
        - bash: |
            set -e
            set -x

            cargo clippy $(CLIPPY_ARGS)

        - bash: test -z "$(git status --porcelain)"

  - stage: "CLH_Test_Non_CVM"
    displayName: "Cloud-Hypervisor Test (NON-CVM)"
    dependsOn: CLH_Build
    pool:
      name: LSG_Virt_1ES_Pool
    jobs:
      - template: virtstack\pipelines\templates\linux_dom0_test_template.yml@lisa
        parameters:
          test_scenario: "$(test_project) - NON_CVM"
          test_project: $(test_project)
          checkout_repo: "lisa"
          use_ms_clh_repo: "yes"
          use_ms_guest_kernel: "YES"
          use_ms_hypervisor_fw: "YES"
          use_ms_ovmf_fw: "YES"
          override_clh_ref: $(clh_ref)
          ch_subtest_include_list: "$(ch_integration_tests),common_parallel::test_api_pause_resume"
          system_access_token: $(System.AccessToken)
          run_on_intel: ${{ parameters.run_on_intel }}
          run_on_amd: ${{ parameters.run_on_amd }}
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            intel_vm_size_func: "Standard_D16ds_v5"
            amd_vm_size_func: "Standard_D16ads_v5"
          ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
            intel_vm_size_func: ${{ parameters.intel_vm_size_func }}
            amd_vm_size_func: ${{ parameters.amd_vm_size_func }}
          run_ch_integration_tests: ${{ parameters.run_ch_integration_tests }}
          ${{ if and(ne(parameters.override_clh_ref, ' '), ne(parameters.override_clh_ref, '')) }}:
            override_clh_ref: ${{ parameters.override_clh_ref }}
          ${{ if and(ne(parameters.githubref, ' '), ne(parameters.githubref, '')) }}:
            githubref: ${{ parameters.githubref }}

  - stage: "CLH_Test_CVM"
    displayName: "Cloud-Hypervisor Test (CVM)"
    dependsOn: CLH_Build
    condition: eq(${{ parameters.run_on_cvm }}, True)
    pool:
      name: LSG_Virt_1ES_Pool
    jobs:
      - template: virtstack\pipelines\templates\linux_dom0_test_template.yml@lisa
        parameters:
          test_scenario: "$(test_project) - NON_CVM"
          test_project: $(test_project)
          checkout_repo: "lisa"
          use_ms_clh_repo: "yes"
          clh_guest_vm_type: "CVM"
          override_clh_ref: $(clh_ref)
          run_on_amd: true
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            amd_vm_size_func: "Standard_DC16ads_cc_v5"
          ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
            amd_vm_size_func: ${{ parameters.amd_vm_size_func_cvm }}
          ch_subtest_include_list: $(ch_integration_tests)
          ch_subtest_exclude_list: $(ch_tests_exclude_list_cvm)
          system_access_token: $(System.AccessToken)
          run_ch_integration_tests: ${{ parameters.run_ch_integration_tests }}
          ${{ if and(ne(parameters.override_clh_ref, ' '), ne(parameters.override_clh_ref, '')) }}:
            override_clh_ref: ${{ parameters.override_clh_ref }}
          ${{ if and(ne(parameters.githubref, ' '), ne(parameters.githubref, '')) }}:
            githubref: ${{ parameters.githubref }}
